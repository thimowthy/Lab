node n1 {
    type router
    model router
    network-config {
	hostname Router
	!
	interface eth0
	 ipv6 address 2001:db8:0::1/64
	 ip address 200.17.121.1/24
	!
	interface eth1
	 ip address 192.0.3.1/24
	 ipv6 address 2001:db8:1::1/64
	!
    }
    canvas c1
    iconcoords {331.0 145.0}
    labelcoords {336.0 127.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n5}
}

node n2 {
    type router
    model host
    network-config {
	hostname Server
	!
	interface eth0
	 ipv6 address 2001:db8:0::10/64
	 ip address 200.17.121.10/24
	!
    }
    canvas c1
    iconcoords {182.0 279.0}
    labelcoords {184.0 324.0}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:HTTP
	custom-command HTTP
	config {
	files=('/etc/apache2/apache2.conf', '/etc/apache2/envvars', '/var/www/index.html', )
	}
    }
    custom-config {
	custom-config-id service:HTTP:/etc/apache2/apache2.conf
	custom-command /etc/apache2/apache2.conf
	config {
	# apache2.conf generated by utility.py:HttpService
	LockFile ${APACHE_LOCK_DIR}/accept.lock
	PidFile ${APACHE_PID_FILE}
	Timeout 300
	KeepAlive On
	MaxKeepAliveRequests 100
	KeepAliveTimeout 5
	
	<IfModule mpm_prefork_module>
	    StartServers          5
	    MinSpareServers       5
	    MaxSpareServers      10
	    MaxClients          150
	    MaxRequestsPerChild   0
	</IfModule>
	
	<IfModule mpm_worker_module>
	    StartServers          2
	    MinSpareThreads      25
	    MaxSpareThreads      75 
	    ThreadLimit          64
	    ThreadsPerChild      25
	    MaxClients          150
	    MaxRequestsPerChild   0
	</IfModule>
	
	<IfModule mpm_event_module>
	    StartServers          2
	    MinSpareThreads      25
	    MaxSpareThreads      75 
	    ThreadLimit          64
	    ThreadsPerChild      25
	    MaxClients          150
	    MaxRequestsPerChild   0
	</IfModule>
	
	User ${APACHE_RUN_USER}
	Group ${APACHE_RUN_GROUP}
	
	AccessFileName .htaccess
	
	<Files ~ "^\.ht">
	    Order allow,deny
	    Deny from all
	    Satisfy all
	</Files>
	
	DefaultType None
	
	HostnameLookups Off
	
	ErrorLog ${APACHE_LOG_DIR}/error.log
	LogLevel warn
	
	#Include mods-enabled/*.load
	#Include mods-enabled/*.conf
	LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
	LoadModule auth_basic_module /usr/lib/apache2/modules/mod_auth_basic.so
	LoadModule authz_default_module /usr/lib/apache2/modules/mod_authz_default.so
	LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so
	LoadModule authz_user_module /usr/lib/apache2/modules/mod_authz_user.so
	LoadModule autoindex_module /usr/lib/apache2/modules/mod_autoindex.so
	LoadModule dir_module /usr/lib/apache2/modules/mod_dir.so
	LoadModule env_module /usr/lib/apache2/modules/mod_env.so
	
	NameVirtualHost *:80
	Listen 80
	
	<IfModule mod_ssl.c>
	    Listen 443
	</IfModule>
	<IfModule mod_gnutls.c>
	    Listen 443
	</IfModule>
	
	LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
	LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
	LogFormat "%h %l %u %t \"%r\" %>s %O" common
	LogFormat "%{Referer}i -> %U" referer
	LogFormat "%{User-agent}i" agent
	
	ServerTokens OS
	ServerSignature On
	TraceEnable Off
	
	<VirtualHost *:80>
		ServerAdmin webmaster@localhost
		DocumentRoot /
		<Directory />
			Options FollowSymLinks
			AllowOverride None
		</Directory>
		<Directory /var/www/>
			Options Indexes FollowSymLinks MultiViews
			AllowOverride None
			Order allow,deny
			allow from all
		</Directory>
		ErrorLog ${APACHE_LOG_DIR}/error.log
		LogLevel warn
		CustomLog ${APACHE_LOG_DIR}/access.log combined
	</VirtualHost>
	
	
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('Start.py', 'Servidor.py', 'index.html', )
	cmdup=('python Servidor.py', 'python Start.py', )
	starttime=3
	}
    }
    custom-config {
	custom-config-id service:UserDefined:index.html
	custom-command index.html
	config {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Redes de Computadores</title>
	</head>
	<body>
		<h1>Redes de Computadores</h1>
		<p>Uma rede de computadores é um conjunto de dispositivos eletrônicos interconectados que permitem a troca de informações e compartilhamento de recursos.</p>
		<h2>Tipos de Redes de Computadores</h2>
		<ul>
			<li>Redes Locais (LAN): são redes de computadores que cobrem uma área geográfica limitada, como um escritório, prédio ou campus universitário.</li>
			<li>Redes Metropolitanas (MAN): são redes que cobrem uma área geográfica maior do que uma LAN, como uma cidade ou região metropolitana.</li>
			<li>Redes de Longa Distância (WAN): são redes que cobrem uma área geográfica ainda maior, como um país ou continente.</li>
		</ul>
		<h2>Componentes de uma Rede de Computadores</h2>
		<p>Uma rede de computadores é composta por vários componentes, incluindo:</p>
		<ul>
			<li>Dispositivos de rede, como roteadores, switches e hubs</li>
			<li>Cabos de rede, como cabos de par trançado, cabos coaxiais e cabos de fibra óptica</li>
			<li>Placas de rede, que permitem que os computadores se conectem à rede</li>
			<li>Software de rede, como sistemas operacionais de rede e protocolos de rede</li>
		</ul>
		<h2>Protocolos de Rede</h2>
		<p>Os protocolos de rede são conjuntos de regras que governam a comunicação entre dispositivos em uma rede de computadores. Alguns dos protocolos de rede mais comuns incluem:</p>
		<ul>
			<li>Protocolo de Internet (IP)</li>
			<li>Protocolo de Controle de Transmissão (TCP)</li>
			<li>Protocolo de Transferência de Hipertexto (HTTP)</li>
			<li>Protocolo de Correio Simples (SMTP)</li>
			<li>Protocolo de Acesso Remoto (RDP)</li>
		</ul>
		<h2>Segurança de Rede</h2>
		<p>A segurança de rede é uma preocupação importante em qualquer rede de computadores. Algumas das medidas de segurança comuns incluem:</p>
		<ul>
			<li>Firewalls de rede</li>
			<li>Software antivírus</li>
			<li>Autenticação de usuários</li>
			<li>Criptografia de dados</li>
		</ul>
	</body>
	</html>
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Servidor.py
	custom-command Servidor.py
	config {
	from socket import *
	
	portaServidor = 12000
	
	socketServidor = socket (AF_INET, SOCK_STREAM)
	
	socketServidor.bind (('200.17.121.10', portaServidor))
	
	socketServidor.listen (1)
	
	# Python 2
	print "O servidor esta pronto para receber"
	
	# Python 3
	# print ("O servidor esta pronto para receber")
	
	while 1 :
	
	    socketConexao, endereco = socketServidor.accept ()
	
	    frase = socketConexao.recv (1024)
	
	    fraseMaiscula = frase.upper ()
	
	    socketConexao.send (fraseMaiscula)
	
	    socketConexao.close ()
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Start.py
	custom-command Start.py
	config {
	file:///tmp/Lab/start.py
	}
    }
    services {DefaultRoute SSH HTTP UserDefined}
}

node n3 {
    type router
    model PC
    network-config {
	hostname Host1
	!
	interface eth0
	 ip address 192.0.3.20/24
	 ipv6 address 2001:db8:1::20/64
	!
    }
    canvas c1
    iconcoords {460.0 396.0}
    labelcoords {459.0 445.0}
    interface-peer {eth0 n5}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('Cliente.py', )
	cmdup=('python Cliente.py', )
	meta=Cliente
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Cliente.py
	custom-command Cliente.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '200.17.121.10'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	# frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	print "Do Servidor: ", fraseModificada
	
	# Python 3
	# print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n4 {
    type router
    model PC
    network-config {
	hostname Host2
	!
	interface eth0
	 ip address 192.0.3.21/24
	 ipv6 address 2001:db8:1::21/64
	!
    }
    canvas c1
    iconcoords {616.0 399.0}
    labelcoords {618.0 446.0}
    interface-peer {eth0 n5}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('Cliente.py', )
	cmdup=('python Cliente.py', )
	meta=Cliente
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Cliente.py
	custom-command Cliente.py
	config {
	
	# Importação da biblioteca de socket
	from socket import *
	
	nomeServidor = '200.17.121.10'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	# frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	print "Do Servidor: ", fraseModificada
	
	# Python 3
	# print ("Do Servidor: ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n5 {
    type lanswitch
    network-config {
	hostname Switch
	!
    }
    canvas c1
    iconcoords {618.0 144.0}
    labelcoords {628.0 127.0}
    interface-peer {e0 n1}
    interface-peer {e1 n3}
    interface-peer {e2 n4}
    interface-peer {e3 n6}
}

node n6 {
    type router
    model PC
    network-config {
	hostname Host3
	!
	interface eth0
	 ip address 192.0.3.22/24
	 ipv6 address 2001:db8:1::22/64
	!
    }
    canvas c1
    iconcoords {777.0 394.0}
    labelcoords {777.0 444.0}
    interface-peer {eth0 n5}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('Cliente.py', 'Request.py', )
	cmdup=('python Request.py', )
	meta=Cliente
	starttime=5
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Request.py
	custom-command Request.py
	config {
	
	import subprocess
	
	subprocess.call("wget http://200.17.121.10")
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Cliente.py
	custom-command Cliente.py
	config {
	
	import subprocess
	
	subprocess.call("wget http://200.17.121.10")
	
	}
    }
    services {DefaultRoute UserDefined}
}

link l1 {
    nodes {n2 n1}
    bandwidth 0
}

link l2 {
    nodes {n1 n5}
    bandwidth 0
}

link l3 {
    nodes {n5 n3}
    bandwidth 0
}

link l4 {
    nodes {n5 n4}
    bandwidth 0
}

link l5 {
    nodes {n6 n5}
    bandwidth 0
}

annotation a1 {
    iconcoords {107 29 844 458}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {416.0 52.0}
    type text
    label {Rede Local}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    canvas c1
}

annotation a3 {
    type text
    iconcoords {476.0 208.0}
    label {}
    canvas c1
}

annotation a4 {
    type text
    iconcoords {458.0 308.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses yes
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
    controlnet=
    enablerj45=1
    enablesdt=0
    preservedir=0
}

